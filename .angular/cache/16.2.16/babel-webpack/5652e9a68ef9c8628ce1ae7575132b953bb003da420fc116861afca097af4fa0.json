{"ast":null,"code":"import { isSearchResult } from './models/youtube.model';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/youtube.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./components/header/header.component\";\nimport * as i4 from \"./components/category-filter/category-filter.component\";\nimport * as i5 from \"./components/video-grid/video-grid.component\";\nimport * as i6 from \"./components/video-player/video-player.component\";\nfunction AppComponent_app_video_player_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-video-player\", 5);\n    i0.ɵɵlistener(\"close\", function AppComponent_app_video_player_5_Template_app_video_player_close_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeVideo());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"video\", ctx_r0.selectedVideo);\n  }\n}\nlet AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(youtubeService) {\n      this.youtubeService = youtubeService;\n      this.videos = [];\n      this.selectedVideo = null;\n      this.currentCategory = 'cinema';\n      this.pageToken = '';\n      this.isLoading = false;\n    }\n    ngOnInit() {\n      this.loadVideos();\n    }\n    onCategoryChange(category) {\n      this.currentCategory = category;\n      this.pageToken = '';\n      this.videos = [];\n      this.loadVideos();\n    }\n    onSearchOptionsChange(options) {\n      this.pageToken = '';\n      this.videos = [];\n      this.loadVideos(options);\n    }\n    loadVideos(options) {\n      if (this.isLoading) return;\n      this.isLoading = true;\n      const searchOptions = {\n        ...environment.youtubeConfig.defaultSearchOptions,\n        ...options,\n        category: options?.category || this.currentCategory,\n        pageToken: this.pageToken\n      };\n      this.youtubeService.getVideosByCategory(searchOptions).subscribe({\n        next: response => {\n          this.pageToken = response.nextPageToken || '';\n          const newVideos = response.items.map(item => {\n            if (!isSearchResult(item) || !item.snippet) return null;\n            const viewCount = parseInt(item.statistics?.viewCount || '0');\n            // Filter by minimum view count if specified\n            if (searchOptions.minViewCount && viewCount < searchOptions.minViewCount) {\n              return null;\n            }\n            return {\n              id: item.id.videoId,\n              title: item.snippet.title,\n              description: item.snippet.description,\n              thumbnailUrl: item.snippet.thumbnails.medium.url,\n              publishedAt: new Date(item.snippet.publishedAt),\n              viewCount: viewCount,\n              rating: parseInt(item.statistics?.likeCount || '0'),\n              category: this.currentCategory\n            };\n          }).filter(video => video !== null);\n          this.videos = [...this.videos, ...newVideos];\n          this.isLoading = false;\n        },\n        error: error => {\n          console.error('Error loading videos:', error);\n          this.isLoading = false;\n        }\n      });\n    }\n    onLoadMore() {\n      if (this.pageToken) {\n        this.loadVideos();\n      }\n    }\n    onVideoSelect(video) {\n      this.selectedVideo = video;\n    }\n    closeVideo() {\n      this.selectedVideo = null;\n    }\n    static {\n      this.ɵfac = function AppComponent_Factory(t) {\n        return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.YoutubeService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AppComponent,\n        selectors: [[\"app-root\"]],\n        decls: 6,\n        vars: 3,\n        consts: [[1, \"app-container\"], [1, \"main-content\"], [3, \"searchOptionsChange\"], [3, \"videos\", \"isLoading\", \"videoSelect\", \"loadMore\"], [3, \"video\", \"close\", 4, \"ngIf\"], [3, \"video\", \"close\"]],\n        template: function AppComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"app-header\");\n            i0.ɵɵelementStart(2, \"main\", 1)(3, \"app-category-filter\", 2);\n            i0.ɵɵlistener(\"searchOptionsChange\", function AppComponent_Template_app_category_filter_searchOptionsChange_3_listener($event) {\n              return ctx.onSearchOptionsChange($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"app-video-grid\", 3);\n            i0.ɵɵlistener(\"videoSelect\", function AppComponent_Template_app_video_grid_videoSelect_4_listener($event) {\n              return ctx.onVideoSelect($event);\n            })(\"loadMore\", function AppComponent_Template_app_video_grid_loadMore_4_listener() {\n              return ctx.onLoadMore();\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(5, AppComponent_app_video_player_5_Template, 1, 1, \"app-video-player\", 4);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"videos\", ctx.videos)(\"isLoading\", ctx.isLoading);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.selectedVideo);\n          }\n        },\n        dependencies: [i2.NgIf, i3.HeaderComponent, i4.CategoryFilterComponent, i5.VideoGridComponent, i6.VideoPlayerComponent],\n        styles: [\".app-container[_ngcontent-%COMP%]{min-height:100vh;background-color:#f5f9ff}.app-container[_ngcontent-%COMP%]   .main-content[_ngcontent-%COMP%]{max-width:1200px;margin:0 auto;padding:20px}\"]\n      });\n    }\n  }\n  return AppComponent;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}