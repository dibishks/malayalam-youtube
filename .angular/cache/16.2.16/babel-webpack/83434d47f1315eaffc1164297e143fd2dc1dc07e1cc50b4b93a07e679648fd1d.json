{"ast":null,"code":"import { switchMap, map } from 'rxjs';\nimport { isSearchResult } from '../models/youtube.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass YoutubeService {\n  constructor(http) {\n    this.http = http;\n    this.API_KEY = 'AIzaSyDtPN9B5cvC2ARdE7x5qNROKcfEhc6u8NA';\n    this.API_URL = 'https://www.googleapis.com/youtube/v3';\n  }\n  getVideosByCategory(category, pageToken) {\n    // First, search for videos\n    return this.searchVideos(category, pageToken).pipe(switchMap(searchResponse => {\n      // Get video IDs from search results\n      const videoIds = searchResponse.items.filter(isSearchResult).map(item => item.id.videoId).join(',');\n      // Then get statistics for those videos\n      return this.getVideoDetails(videoIds).pipe(map(statsResponse => {\n        // Merge statistics with search results\n        const items = searchResponse.items.map(searchItem => {\n          if (!isSearchResult(searchItem)) return searchItem;\n          const statsItem = statsResponse.items.find(statItem => statItem.id === searchItem.id.videoId);\n          return {\n            ...searchItem,\n            statistics: statsItem?.statistics\n          };\n        });\n        return {\n          items,\n          nextPageToken: searchResponse.nextPageToken\n        };\n      }));\n    }));\n  }\n  searchVideos(category, pageToken) {\n    const params = {\n      part: 'snippet',\n      maxResults: '12',\n      type: 'video',\n      regionCode: 'IN',\n      relevanceLanguage: 'ml',\n      q: category,\n      pageToken: pageToken || '',\n      key: this.API_KEY\n    };\n    return this.http.get(`${this.API_URL}/search`, {\n      params\n    });\n  }\n  getVideoDetails(videoIds) {\n    const params = {\n      part: 'statistics',\n      id: videoIds,\n      key: this.API_KEY\n    };\n    return this.http.get(`${this.API_URL}/videos`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function YoutubeService_Factory(t) {\n      return new (t || YoutubeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: YoutubeService,\n      factory: YoutubeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { YoutubeService };","map":{"version":3,"names":["switchMap","map","isSearchResult","YoutubeService","constructor","http","API_KEY","API_URL","getVideosByCategory","category","pageToken","searchVideos","pipe","searchResponse","videoIds","items","filter","item","id","videoId","join","getVideoDetails","statsResponse","searchItem","statsItem","find","statItem","statistics","nextPageToken","params","part","maxResults","type","regionCode","relevanceLanguage","q","key","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\playground\\malayalm-tube\\src\\app\\services\\youtube.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, switchMap, map } from 'rxjs';\r\nimport { YouTubeResponse, YouTubeItem, isSearchResult } from '../models/youtube.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YoutubeService {\r\n  private readonly API_KEY = 'AIzaSyDtPN9B5cvC2ARdE7x5qNROKcfEhc6u8NA';\r\n  private readonly API_URL = 'https://www.googleapis.com/youtube/v3';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getVideosByCategory(category: string, pageToken?: string): Observable<YouTubeResponse> {\r\n    // First, search for videos\r\n    return this.searchVideos(category, pageToken).pipe(\r\n      switchMap(searchResponse => {\r\n        // Get video IDs from search results\r\n        const videoIds = searchResponse.items\r\n          .filter(isSearchResult)\r\n          .map(item => item.id.videoId)\r\n          .join(',');\r\n        \r\n        // Then get statistics for those videos\r\n        return this.getVideoDetails(videoIds).pipe(\r\n          map(statsResponse => {\r\n            // Merge statistics with search results\r\n            const items = searchResponse.items.map(searchItem => {\r\n              if (!isSearchResult(searchItem)) return searchItem;\r\n              \r\n              const statsItem = statsResponse.items.find(\r\n                statItem => statItem.id === searchItem.id.videoId\r\n              );\r\n              return {\r\n                ...searchItem,\r\n                statistics: statsItem?.statistics\r\n              };\r\n            });\r\n            return {\r\n              items,\r\n              nextPageToken: searchResponse.nextPageToken\r\n            };\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private searchVideos(category: string, pageToken?: string): Observable<YouTubeResponse> {\r\n    const params = {\r\n      part: 'snippet',\r\n      maxResults: '12',\r\n      type: 'video',\r\n      regionCode: 'IN',\r\n      relevanceLanguage: 'ml',\r\n      q: category,\r\n      pageToken: pageToken || '',\r\n      key: this.API_KEY\r\n    };\r\n\r\n    return this.http.get<YouTubeResponse>(`${this.API_URL}/search`, { params });\r\n  }\r\n\r\n  private getVideoDetails(videoIds: string): Observable<YouTubeResponse> {\r\n    const params = {\r\n      part: 'statistics',\r\n      id: videoIds,\r\n      key: this.API_KEY\r\n    };\r\n\r\n    return this.http.get<YouTubeResponse>(`${this.API_URL}/videos`, { params });\r\n  }\r\n} "],"mappings":"AAEA,SAAqBA,SAAS,EAAEC,GAAG,QAAQ,MAAM;AACjD,SAAuCC,cAAc,QAAQ,yBAAyB;;;AAEtF,MAGaC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHP,KAAAC,OAAO,GAAG,yCAAyC;IACnD,KAAAC,OAAO,GAAG,uCAAuC;EAE3B;EAEvCC,mBAAmBA,CAACC,QAAgB,EAAEC,SAAkB;IACtD;IACA,OAAO,IAAI,CAACC,YAAY,CAACF,QAAQ,EAAEC,SAAS,CAAC,CAACE,IAAI,CAChDZ,SAAS,CAACa,cAAc,IAAG;MACzB;MACA,MAAMC,QAAQ,GAAGD,cAAc,CAACE,KAAK,CAClCC,MAAM,CAACd,cAAc,CAAC,CACtBD,GAAG,CAACgB,IAAI,IAAIA,IAAI,CAACC,EAAE,CAACC,OAAO,CAAC,CAC5BC,IAAI,CAAC,GAAG,CAAC;MAEZ;MACA,OAAO,IAAI,CAACC,eAAe,CAACP,QAAQ,CAAC,CAACF,IAAI,CACxCX,GAAG,CAACqB,aAAa,IAAG;QAClB;QACA,MAAMP,KAAK,GAAGF,cAAc,CAACE,KAAK,CAACd,GAAG,CAACsB,UAAU,IAAG;UAClD,IAAI,CAACrB,cAAc,CAACqB,UAAU,CAAC,EAAE,OAAOA,UAAU;UAElD,MAAMC,SAAS,GAAGF,aAAa,CAACP,KAAK,CAACU,IAAI,CACxCC,QAAQ,IAAIA,QAAQ,CAACR,EAAE,KAAKK,UAAU,CAACL,EAAE,CAACC,OAAO,CAClD;UACD,OAAO;YACL,GAAGI,UAAU;YACbI,UAAU,EAAEH,SAAS,EAAEG;WACxB;QACH,CAAC,CAAC;QACF,OAAO;UACLZ,KAAK;UACLa,aAAa,EAAEf,cAAc,CAACe;SAC/B;MACH,CAAC,CAAC,CACH;IACH,CAAC,CAAC,CACH;EACH;EAEQjB,YAAYA,CAACF,QAAgB,EAAEC,SAAkB;IACvD,MAAMmB,MAAM,GAAG;MACbC,IAAI,EAAE,SAAS;MACfC,UAAU,EAAE,IAAI;MAChBC,IAAI,EAAE,OAAO;MACbC,UAAU,EAAE,IAAI;MAChBC,iBAAiB,EAAE,IAAI;MACvBC,CAAC,EAAE1B,QAAQ;MACXC,SAAS,EAAEA,SAAS,IAAI,EAAE;MAC1B0B,GAAG,EAAE,IAAI,CAAC9B;KACX;IAED,OAAO,IAAI,CAACD,IAAI,CAACgC,GAAG,CAAkB,GAAG,IAAI,CAAC9B,OAAO,SAAS,EAAE;MAAEsB;IAAM,CAAE,CAAC;EAC7E;EAEQR,eAAeA,CAACP,QAAgB;IACtC,MAAMe,MAAM,GAAG;MACbC,IAAI,EAAE,YAAY;MAClBZ,EAAE,EAAEJ,QAAQ;MACZsB,GAAG,EAAE,IAAI,CAAC9B;KACX;IAED,OAAO,IAAI,CAACD,IAAI,CAACgC,GAAG,CAAkB,GAAG,IAAI,CAAC9B,OAAO,SAAS,EAAE;MAAEsB;IAAM,CAAE,CAAC;EAC7E;;;uBAhEW1B,cAAc,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdtC,cAAc;MAAAuC,OAAA,EAAdvC,cAAc,CAAAwC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;SAEPzC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}