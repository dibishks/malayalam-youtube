{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { switchMap, map } from 'rxjs';\nimport { isSearchResult } from '../models/youtube.model';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet YoutubeService = /*#__PURE__*/(() => {\n  class YoutubeService {\n    constructor(http) {\n      this.http = http;\n      this.API_KEY = 'AIzaSyDtPN9B5cvC2ARdE7x5qNROKcfEhc6u8NA';\n      this.API_URL = 'https://www.googleapis.com/youtube/v3';\n    }\n    getVideosByCategory(options) {\n      return this.searchVideos(options).pipe(switchMap(searchResponse => {\n        const videoIds = searchResponse.items.filter(isSearchResult).map(item => item.id.videoId).join(',');\n        return this.getVideoDetails(videoIds).pipe(map(statsResponse => {\n          const items = searchResponse.items.map(searchItem => {\n            if (!isSearchResult(searchItem)) return searchItem;\n            const statsItem = statsResponse.items.find(statItem => statItem.id === searchItem.id.videoId);\n            return {\n              ...searchItem,\n              statistics: statsItem?.statistics\n            };\n          });\n          return {\n            items,\n            nextPageToken: searchResponse.nextPageToken\n          };\n        }));\n      }));\n    }\n    searchVideos(options) {\n      const today = new Date();\n      const thirtyDaysAgo = new Date(today.setDate(today.getDate() - 30));\n      let params = new HttpParams().set('part', 'snippet').set('type', 'video').set('regionCode', 'IN').set('relevanceLanguage', 'ml').set('maxResults', options.maxResults?.toString() || '12').set('key', this.API_KEY);\n      const categoryConfig = environment.youtubeConfig.categories.find(cat => cat.id === options.category);\n      if (categoryConfig) {\n        const searchParams = {\n          ...categoryConfig.searchParams,\n          ...options\n        };\n        params = params.set('q', searchParams.q || '');\n        if (searchParams.videoDuration) {\n          params = params.set('videoDuration', searchParams.videoDuration);\n        }\n        if (searchParams.order) {\n          params = params.set('order', searchParams.order);\n        }\n        if (searchParams.videoCategoryId) {\n          params = params.set('videoCategoryId', searchParams.videoCategoryId);\n        }\n        if (searchParams.publishedAfter === 'today') {\n          params = params.set('publishedAfter', thirtyDaysAgo.toISOString());\n        }\n      }\n      if (options.pageToken) {\n        params = params.set('pageToken', options.pageToken);\n      }\n      return this.http.get(`${this.API_URL}/search`, {\n        params\n      }).pipe(map(response => {\n        if (options.minViewCount && options.minViewCount > 0) {\n          response.items = response.items.filter(item => {\n            const viewCount = parseInt(item.statistics?.viewCount || '0');\n            return viewCount >= (options.minViewCount || 0);\n          });\n        }\n        return response;\n      }));\n    }\n    getVideoDetails(videoIds) {\n      const params = new HttpParams().set('part', 'statistics').set('id', videoIds).set('key', this.API_KEY);\n      return this.http.get(`${this.API_URL}/videos`, {\n        params\n      });\n    }\n    static {\n      this.ɵfac = function YoutubeService_Factory(t) {\n        return new (t || YoutubeService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: YoutubeService,\n        factory: YoutubeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return YoutubeService;\n})();\nexport { YoutubeService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}