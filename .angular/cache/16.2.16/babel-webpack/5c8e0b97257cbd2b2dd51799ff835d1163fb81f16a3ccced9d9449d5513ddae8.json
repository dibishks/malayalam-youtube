{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { switchMap, map } from 'rxjs';\nimport { isSearchResult } from '../models/youtube.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass YoutubeService {\n  constructor(http) {\n    this.http = http;\n    this.API_KEY = 'AIzaSyDtPN9B5cvC2ARdE7x5qNROKcfEhc6u8NA';\n    this.API_URL = 'https://www.googleapis.com/youtube/v3';\n  }\n  getVideosByCategory(options) {\n    return this.searchVideos(options).pipe(switchMap(searchResponse => {\n      // Get video IDs from search results\n      const videoIds = searchResponse.items.filter(isSearchResult).map(item => item.id.videoId).join(',');\n      // Then get statistics for those videos\n      return this.getVideoDetails(videoIds).pipe(map(statsResponse => {\n        // Merge statistics with search results\n        const items = searchResponse.items.map(searchItem => {\n          if (!isSearchResult(searchItem)) return searchItem;\n          const statsItem = statsResponse.items.find(statItem => statItem.id === searchItem.id.videoId);\n          return {\n            ...searchItem,\n            statistics: statsItem?.statistics\n          };\n        });\n        return {\n          items,\n          nextPageToken: searchResponse.nextPageToken\n        };\n      }));\n    }));\n  }\n  searchVideos(options) {\n    // Create params object with required parameters\n    let params = new HttpParams().set('part', 'snippet').set('type', 'video').set('regionCode', 'IN').set('relevanceLanguage', 'ml').set('q', `${options.category} malayalam`).set('maxResults', options.maxResults?.toString() || '12').set('key', this.API_KEY);\n    // Add optional parameters if they exist\n    if (options.pageToken) {\n      params = params.set('pageToken', options.pageToken);\n    }\n    if (options.videoCategoryId) {\n      params = params.set('videoCategoryId', options.videoCategoryId);\n    }\n    if (options.videoDefinition) {\n      params = params.set('videoDefinition', options.videoDefinition);\n    }\n    if (options.videoDuration) {\n      params = params.set('videoDuration', options.videoDuration);\n    }\n    if (options.order) {\n      params = params.set('order', options.order);\n    }\n    return this.http.get(`${this.API_URL}/search`, {\n      params\n    });\n  }\n  getVideoDetails(videoIds) {\n    const params = new HttpParams().set('part', 'statistics').set('id', videoIds).set('key', this.API_KEY);\n    return this.http.get(`${this.API_URL}/videos`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function YoutubeService_Factory(t) {\n      return new (t || YoutubeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: YoutubeService,\n      factory: YoutubeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { YoutubeService };","map":{"version":3,"names":["HttpParams","switchMap","map","isSearchResult","YoutubeService","constructor","http","API_KEY","API_URL","getVideosByCategory","options","searchVideos","pipe","searchResponse","videoIds","items","filter","item","id","videoId","join","getVideoDetails","statsResponse","searchItem","statsItem","find","statItem","statistics","nextPageToken","params","set","category","maxResults","toString","pageToken","videoCategoryId","videoDefinition","videoDuration","order","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\playground\\malayalm-tube\\src\\app\\services\\youtube.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, switchMap, map } from 'rxjs';\r\nimport { YouTubeResponse, YouTubeItem, isSearchResult, SearchOptions } from '../models/youtube.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YoutubeService {\r\n  private readonly API_KEY = 'AIzaSyDtPN9B5cvC2ARdE7x5qNROKcfEhc6u8NA';\r\n  private readonly API_URL = 'https://www.googleapis.com/youtube/v3';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getVideosByCategory(options: SearchOptions): Observable<YouTubeResponse> {\r\n    return this.searchVideos(options).pipe(\r\n      switchMap(searchResponse => {\r\n        // Get video IDs from search results\r\n        const videoIds = searchResponse.items\r\n          .filter(isSearchResult)\r\n          .map(item => item.id.videoId)\r\n          .join(',');\r\n        \r\n        // Then get statistics for those videos\r\n        return this.getVideoDetails(videoIds).pipe(\r\n          map(statsResponse => {\r\n            // Merge statistics with search results\r\n            const items = searchResponse.items.map(searchItem => {\r\n              if (!isSearchResult(searchItem)) return searchItem;\r\n              \r\n              const statsItem = statsResponse.items.find(\r\n                statItem => statItem.id === searchItem.id.videoId\r\n              );\r\n              return {\r\n                ...searchItem,\r\n                statistics: statsItem?.statistics\r\n              };\r\n            });\r\n            return {\r\n              items,\r\n              nextPageToken: searchResponse.nextPageToken\r\n            };\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  private searchVideos(options: SearchOptions): Observable<YouTubeResponse> {\r\n    // Create params object with required parameters\r\n    let params = new HttpParams()\r\n      .set('part', 'snippet')\r\n      .set('type', 'video')\r\n      .set('regionCode', 'IN')\r\n      .set('relevanceLanguage', 'ml')\r\n      .set('q', `${options.category} malayalam`)\r\n      .set('maxResults', options.maxResults?.toString() || '12')\r\n      .set('key', this.API_KEY);\r\n\r\n    // Add optional parameters if they exist\r\n    if (options.pageToken) {\r\n      params = params.set('pageToken', options.pageToken);\r\n    }\r\n    if (options.videoCategoryId) {\r\n      params = params.set('videoCategoryId', options.videoCategoryId);\r\n    }\r\n    if (options.videoDefinition) {\r\n      params = params.set('videoDefinition', options.videoDefinition);\r\n    }\r\n    if (options.videoDuration) {\r\n      params = params.set('videoDuration', options.videoDuration);\r\n    }\r\n    if (options.order) {\r\n      params = params.set('order', options.order);\r\n    }\r\n\r\n    return this.http.get<YouTubeResponse>(`${this.API_URL}/search`, { params });\r\n  }\r\n\r\n  private getVideoDetails(videoIds: string): Observable<YouTubeResponse> {\r\n    const params = new HttpParams()\r\n      .set('part', 'statistics')\r\n      .set('id', videoIds)\r\n      .set('key', this.API_KEY);\r\n\r\n    return this.http.get<YouTubeResponse>(`${this.API_URL}/videos`, { params });\r\n  }\r\n} "],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,SAAS,EAAEC,GAAG,QAAQ,MAAM;AACjD,SAAuCC,cAAc,QAAuB,yBAAyB;;;AAErG,MAGaC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHP,KAAAC,OAAO,GAAG,yCAAyC;IACnD,KAAAC,OAAO,GAAG,uCAAuC;EAE3B;EAEvCC,mBAAmBA,CAACC,OAAsB;IACxC,OAAO,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,CAACE,IAAI,CACpCX,SAAS,CAACY,cAAc,IAAG;MACzB;MACA,MAAMC,QAAQ,GAAGD,cAAc,CAACE,KAAK,CAClCC,MAAM,CAACb,cAAc,CAAC,CACtBD,GAAG,CAACe,IAAI,IAAIA,IAAI,CAACC,EAAE,CAACC,OAAO,CAAC,CAC5BC,IAAI,CAAC,GAAG,CAAC;MAEZ;MACA,OAAO,IAAI,CAACC,eAAe,CAACP,QAAQ,CAAC,CAACF,IAAI,CACxCV,GAAG,CAACoB,aAAa,IAAG;QAClB;QACA,MAAMP,KAAK,GAAGF,cAAc,CAACE,KAAK,CAACb,GAAG,CAACqB,UAAU,IAAG;UAClD,IAAI,CAACpB,cAAc,CAACoB,UAAU,CAAC,EAAE,OAAOA,UAAU;UAElD,MAAMC,SAAS,GAAGF,aAAa,CAACP,KAAK,CAACU,IAAI,CACxCC,QAAQ,IAAIA,QAAQ,CAACR,EAAE,KAAKK,UAAU,CAACL,EAAE,CAACC,OAAO,CAClD;UACD,OAAO;YACL,GAAGI,UAAU;YACbI,UAAU,EAAEH,SAAS,EAAEG;WACxB;QACH,CAAC,CAAC;QACF,OAAO;UACLZ,KAAK;UACLa,aAAa,EAAEf,cAAc,CAACe;SAC/B;MACH,CAAC,CAAC,CACH;IACH,CAAC,CAAC,CACH;EACH;EAEQjB,YAAYA,CAACD,OAAsB;IACzC;IACA,IAAImB,MAAM,GAAG,IAAI7B,UAAU,EAAE,CAC1B8B,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CACtBA,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CACpBA,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CACvBA,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAC9BA,GAAG,CAAC,GAAG,EAAE,GAAGpB,OAAO,CAACqB,QAAQ,YAAY,CAAC,CACzCD,GAAG,CAAC,YAAY,EAAEpB,OAAO,CAACsB,UAAU,EAAEC,QAAQ,EAAE,IAAI,IAAI,CAAC,CACzDH,GAAG,CAAC,KAAK,EAAE,IAAI,CAACvB,OAAO,CAAC;IAE3B;IACA,IAAIG,OAAO,CAACwB,SAAS,EAAE;MACrBL,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,WAAW,EAAEpB,OAAO,CAACwB,SAAS,CAAC;;IAErD,IAAIxB,OAAO,CAACyB,eAAe,EAAE;MAC3BN,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,iBAAiB,EAAEpB,OAAO,CAACyB,eAAe,CAAC;;IAEjE,IAAIzB,OAAO,CAAC0B,eAAe,EAAE;MAC3BP,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,iBAAiB,EAAEpB,OAAO,CAAC0B,eAAe,CAAC;;IAEjE,IAAI1B,OAAO,CAAC2B,aAAa,EAAE;MACzBR,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEpB,OAAO,CAAC2B,aAAa,CAAC;;IAE7D,IAAI3B,OAAO,CAAC4B,KAAK,EAAE;MACjBT,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,OAAO,EAAEpB,OAAO,CAAC4B,KAAK,CAAC;;IAG7C,OAAO,IAAI,CAAChC,IAAI,CAACiC,GAAG,CAAkB,GAAG,IAAI,CAAC/B,OAAO,SAAS,EAAE;MAAEqB;IAAM,CAAE,CAAC;EAC7E;EAEQR,eAAeA,CAACP,QAAgB;IACtC,MAAMe,MAAM,GAAG,IAAI7B,UAAU,EAAE,CAC5B8B,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CACzBA,GAAG,CAAC,IAAI,EAAEhB,QAAQ,CAAC,CACnBgB,GAAG,CAAC,KAAK,EAAE,IAAI,CAACvB,OAAO,CAAC;IAE3B,OAAO,IAAI,CAACD,IAAI,CAACiC,GAAG,CAAkB,GAAG,IAAI,CAAC/B,OAAO,SAAS,EAAE;MAAEqB;IAAM,CAAE,CAAC;EAC7E;;;uBA9EWzB,cAAc,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdvC,cAAc;MAAAwC,OAAA,EAAdxC,cAAc,CAAAyC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;SAEP1C,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}